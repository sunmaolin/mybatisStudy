<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<!-- namespace：对应哪个接口 -->
<mapper namespace="dao.RoleMapper">

    <resultMap id="roleMapper" type="role">
        <!--若该实体类，没有无参构造，可使用constructor标签-->
        <!--<constructor>
            <idArg/>
            <arg/>
        </constructor>-->
        <result property="roleId" column="role_id"/>
        <result property="roleName" column="role_name"/>
        <result property="roleSex" column="role_sex"/>
        <result property="rolePhone" column="role_phone"/>
        <result property="roleAddress" column="role_address"/>
    </resultMap>

    <resultMap id="typeHandlerTest" type="string">
        <!--下面是测试使用自定义typeHandler的俩种方式-->
        <result property="roleName" column="role_name" typeHandler="typeHandler.ImitateStringTypeHandler"/>
<!--        <result property="roleName" column="role_name" jdbcType="VARCHAR" javaType="string"/>-->
    </resultMap>

    <resultMap id="enumOrdinalTypeHandlerTest" type="role">
        <!--这种是根据定义的常量顺序下标进行枚举类获取-->
<!--        <result property="sexEnum" column="role_sex" typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"/>-->
        <!--这种是根据定义的常量名枚举获取枚举类进行转换,调用的是Enum.valueOf(SexEnum.class,"MALE")方法-->
<!--        <result property="sexEnum" column="role_sex" typeHandler="org.apache.ibatis.type.EnumTypeHandler"/>-->
        <!--自定义枚举类获取,这样可以根据我们自定定义的常量数值进行转化-->
        <result property="sexEnum" column="role_sex" typeHandler="typeHandler.SexEnumTypeHandler"/>
    </resultMap>

    <!--下面是测试使用自定义typeHandler的俩种方式,也可以这样写-->
    <select id="xxx" parameterType="string" resultType="string">
        select note from role where note like concat('%',#{note,typeHandler=typeHandler.ImitateStringTypeHandler},'%')
        <!--若为number类型，可在后面加上属性numericScale指定精度  numericScale=2-->
        select note from role where note like concat('%',#{note,jdbcType=VARCHAR,javaType=string},'%')
    </select>

    <!--测试不同数据库厂商,mybatis会根据不同的数据库执行sql-->
    <select id="xxxx" databaseId="oracle">

    </select>

    <select id="getSexByEnumOrdinal" parameterType="int" resultMap="enumOrdinalTypeHandlerTest">
        select role_sex from role where role_id = #{roleId}
    </select>

    <select id="getRoleName" parameterType="int" resultMap="typeHandlerTest">
        select role_name from role where role_id = #{roleId}
    </select>

    <!--<select id="getRoleByXml" parameterType="int" resultType="role">
        select * from role where role_id = #{roleId}
    </select>-->

    <select id="getRoleByXml" parameterType="int" resultMap="roleMapper">
        select * from role where role_id = #{roleId}
    </select>

    <insert id="insertRole" parameterType="role" useGeneratedKeys="true" keyProperty="roleId">
        insert into role (role_name,role_sex) values(#{roleName},#{roleSex})
    </insert>

    <delete id="deleteRole" parameterType="int">
        delete from role where role_id = #{roleId}
    </delete>

    <update id="updateRole" parameterType="role">
        update role set note = #{note} where role_id = #{roleId}
    </update>

    <select id="findRoles" parameterType="string" resultMap="roleMapper">
        select * from role where role_name like concat('%',#{roleName},'%')
    </select>




</mapper>