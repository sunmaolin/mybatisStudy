<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">
<!-- 映射器测试mapper -->
<mapper namespace="dao.RoleMapperTest">

    <resultMap id="roleMap" type="role">
        <!--代表主键-->
        <id property="roleId" column="role_id"/>
        <result property="roleName" column="role_name"/>
        <result property="roleAddress" column="role_address"/>
        <result property="roleSex" column="role_sex"/>
        <result property="rolePhone" column="role_phone"/>
    </resultMap>

    <!--因为开启了默认映射autoMappingBehavior属性,所以会自动映射到roleName-->
    <select id="xxx">
        select role_name as roleName from role
    </select>

    <!--测试传递多个参数-->
    <!--1.通过map    不推荐,因为需要知道map的键所代表的含义-->
    <select id="parameterMapTest" resultMap="roleMap" parameterType="map">
        select * from role where role_id = #{roleId} and role_name = #{roleName}
    </select>

    <!--2.通过注解参数的形式传递参数  推荐,参数<=5的时候推荐使用-->
    <select id="parameterAnnotationTest" resultMap="roleMap">
        select * from role where role_id = #{roleId} and role_name = #{roleName}
    </select>

    <!--3.通过javaBean的形式传递参数 推荐,参数>5的时候使用-->
    <select id="parameterBeanTest" resultMap="roleMap" parameterType="role">
        select * from role where role_id = #{roleId} and role_name = #{roleName}
    </select>

    <!--4.通过混合使用传递参数的形式-->
    <select id="parameterMixTest" resultMap="roleMap">
        select * from role where role_id = #{role.roleId} and role_name = #{role.roleName} limit #{limitMap.start},#{limitMap.end}
    </select>

    <!--测试mybatis自带分页查询 rowBounds 适用于小数据量,大数据量性能不佳-->
    <select id="rowBoundsTest" resultMap="roleMap">
        select * from role order by role_id
    </select>

    <!--测试主键回填-->
    <!--keyProperty属性 代表将生成的主键放入哪个属性,若存在多个生成主键用,隔开-->
    <!--keyColumn属性 代表生成主键列的字段,仅当主键不是表中第一列时使用,若存在多个主键,用,隔开-->
    <insert id="generateKeyTest" parameterType="role" useGeneratedKeys="true" keyProperty="roleId" keyColumn="role_id">
        insert into role (role_name,role_phone) values (#{roleName},#{rolePhone})
    </insert>

    <!--测试插入自定义主键  规则为最大主键+3-->
    <insert id="customizeKeyTest" parameterType="role">
        <!--keyProperty对应属性,查出后将id写入  order执行顺序 before在定义的sql之前执行-->
        <selectKey keyProperty="roleId" resultType="int" order="BEFORE">
            select if(max(role_id)=null,1,max(role_id)+3) from role
        </selectKey>
        insert into role (role_id,role_name) values (#{roleId},#{roleName})
    </insert>

    <!--定义sql的部分内容，避免重复书写的尴尬，可以到处引用-->
    <sql id="roleCols">
        role_id,role_name,role_sex,role_adddress,role_phone,note
    </sql>

    <!--测试使用定义的sql-->
    <select id="useSqlTest" parameterType="int" resultMap="roleMap">
        select <include refid="roleCols"/> from role where role_id = #{roleId}
    </select>

    <!--当然我们也可义在sql中使用变量,比如定义表别名-->
    <sql id="variableSql">
        ${alias}.role_id,${alias}.role_name
    </sql>

    <!--测试在sql中使用变量-->
    <select id="variableSqlTest" parameterType="int" resultMap="roleMap">
        select
        <include refid="variableSql">
            <property name="alias" value="aliasRole"/>
        </include>
        from role aliasRole where role_id = #{roleId}
    </select>



</mapper>