<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--配置一些运行参数,只定义一次，到处使用,也可以定义properties的resource属性-->
    <!--如果定义重复  优先使用代码 然后resource中的资源  最后是子节点property-->
    <properties resource="jdbc.properties">
        <property name="database.driver" value="com.mysql.cj.jdbc.Driver"/>
        <property name="database.url" value="jdbc:mysql://localhost:3306/mybatisStudy?serverTimezone=Asia/Shanghai"/>
        <property name="database.username" value="root"/>
        <property name="database.password" value="000"/>
    </properties>
    <!--全量setting配置样例-->
    <settings>
        <!--影响所有映射器中配置缓存的全局开关-->
        <setting name="cacheEnabled" value="true"/>
        <!--延迟加载-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--是否允许单一语句返回多结果集-->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!--使用列标签代替列名-->
        <setting name="useColumnLabel" value="true"/>
        <!--强制使用自动生成主键-->
        <setting name="useGeneratedKeys" value="false"/>
        <!--自动映射列到字段或属性 NONE取消映射，PARTIAL自动映射-->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!--指定自动映射当中未知列（或未知属性类型）时的行为 默认不处理 NONE-->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <!--配置默认的执行器 SIMPLE普通执行器 REUSE重用预处理语句（prepared statements） BATCH重用语句并批量更新-->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!--设置数据库驱动默认返回的条数设置-->
        <setting name="defaultFetchSize" value="100"/>
        <!--允许在嵌套语句中使用分页 允许false-->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!--是否开启自动驼峰命名规则 A_COLUMN（数据库）->aColumn（java）-->
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <!--利用本地缓存机制防止循环引用和加速重复嵌套查询-->
        <setting name="localCacheScope" value="SESSION"/>
        <!--当没有为参数提供特定的jdbc类型时，为空值指定jdbc类型-->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!--指定哪个对象的方法出发一次延迟加载-->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hasCode,toString"/>
    </settings>
    <!--配置别名（自定义别名，使用时不区分大小写）-->
    <typeAliases>
        <typeAlias type="pojo.Role" alias="role"/>
        <!--若需要注册大量别名，可使用包扫描的方式，注册别名为文件第一个字母小写-->
        <!--若出现重名，可在类上加注解@alias("role1")-->
        <package name="pojo"/>
    </typeAliases>
    <!--类型处理器-->
    <typeHandlers>
        <!--这是我们模仿的StringTypeHandler处理器-->
        <typeHandler handler="typeHandler.ImitateStringTypeHandler" javaType="string" jdbcType="VARCHAR"/>
        <!--若需要大量typeHandler则可使用下面的方法-->
        <!--这样没法指定javaType与jdbcType，可在类上添加注解@MappedTypes("String.class") @MappedjdbcTypes("jdbcType.VARCHAR")-->
        <package name="typeHandler"/>
    </typeHandlers>
    <!--对象工厂,没几把屌用,setPropertis方法在源码中直接啥也没干,操蛋-->
    <objectFactory type="objectFactory.MyObjectFactory">
        <property name="mykey" value="myvalue"/>
    </objectFactory>
    <!--数据库环境-->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"></transactionManager>
            <dataSource type="POOLED">
                <property name="driver" value="${database.driver}"/>
                <property name="url" value="${database.url}"/>
                <property name="username" value="${database.username}"/>
                <property name="password" value="${database.password}"/>
            </dataSource>
            <!--配置第三方数据源DBCP-->
<!--            <dataSource type="otherDataSource.DbcpDataSource">-->
<!--                <property name="driver" value="${database.driver}"/>-->
<!--                <property name="url" value="${database.url}"/>-->
<!--                <property name="username" value="${database.username}"/>-->
<!--                <property name="password" value="${database.password}"/>-->
<!--            </dataSource>-->
        </environment>
    </environments>
    <!--数据库厂商标识,可以支持兼容多数据库开发-->
    <databaseIdProvider type="DB_VENDOR">
        <property name="Oracle" value="oracle"/>
        <property name="MySQL" value="mysql"/>
        <property name="DB2" value="db2"/>
    </databaseIdProvider>
    <!--映射文件-->
    <mappers>
        <mapper resource="dao/RoleMapper.xml"/>
    </mappers>

</configuration>